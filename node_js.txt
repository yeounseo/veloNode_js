// node.js ? NodeJS 는 구글 크롬의 자바스크립트 엔진(V8 Engine) 에 기한해 만들어진 서버 사이드 플랫폼. 
// node.js 는 이벤트 기반, 논 블로킹 I/O 모델을 사용해 가볍고 효율적이다.

// Node 는 웹 서버가 아니다. Node 자체로는 아무것도 하지 않는다.
// 단, HTTP 서버를 직접 작성해야한다.( 일부 라이브러리의 도움을 받으면서), Node.js는 그저 코드를 실행할 수 있는 하나의 방법에 불과한 그저 JavaScript 런타임일 뿐이다.

// Node.js 의 특징
// 비동기 I/O 처리, 이벤트 위주 : Node.js 라이브러리의 모든 API는 비동기식이다. 멈추지 않는다 ! (Non-blocking) Node.js 기반 서버는 API가 실핼되었을때, 데이터를 반환할때까지 기다리지않고 , 다음 API를 실행한다. 그리고 이전에 실행했던 API가 결과값을 반환할 시 , NodeJS의 이벤트 알림 메커니즘을 통해 그 결과값을 받아온다.
// 빠른 속도: 구글 크롬의 V8 자바스크립트 엔진을 사용하여 빠른 코드 실행을 제공
// 단일 쓰레드 / 뛰어난 확장성 : Node.js는 이벤트 루프와 함께 단일 쓰레드 모델을 사용한다. 이벤트 메커니즘은 서버가 멈추지 않고 반응하도록 해주어 서버의 확장성을 키워준다. 반면, 일반적인 웹서버(Apache)는 요청을 하처리하기 위하여 제한된 쓰레드를 생성합니다. Node.js는 쓰레드를 한개만 사용하고 Apache 같은 웹서버 보다 훨씬 많은 요청을 처리 할 수 있다.
// 노 버퍼링 : Node.js 어플리케이션엔 데이터 버퍼링이 없고 , 데이터를 chunk로 출력한다.
// 라이센스 : Node.js 는 MIT License가 적용되어 있다.


Node.js 를 어디에 쓸까 ? 
-입출력이 잦은 어플리케이션
-데이터 스트리밍 어플리케이션
-데이터를 실시간으로 다루는 어플리케이션
-JSON API 기반 어플리케이션
-싱글페이지 어플리케이션 

Node.js 를 쓰지 말아야 할 곳 ?
- CPU 사용률이 높은 어플리케이션에선 Node.js 사용을 권장하지 않는다.


Node.js Application 만들기 
1단계 : 필요한 모듈 import 하기 
-어플리케이션에 필요한 모듈을 불러올땐 require 명령을 사용
-다음 코드는 HTTP 모듈을 불러오고 반환되는 HTTP 인스턴스를 http 변수에 저장한다.

var http = require("http");

2.단계 : 서버 생성하기
-1단계에서 만든 http 인스턴스를 사용하여 http:createServer() 메소드를 실행한다. 그리고 listen 메소드를 사용하여 포트 8081과 bind 해준다.
http.createServer() 의 매개변수로는 request와 response를 매개변수로 가지고 있는 함수를 넣어준다.

아래 코드를 보자

http.createServer(function (request, response){
    /*
        HTTP 헤더 전송
        HTTP Status: 200 : OK
        Content Type: text/plain
    */
    response.writeHead(200, {'Content-Type' : 'text/plain'});
    /*
        Response Body 를 "Hello World"로 설정
    */
    response.end("Hello world\n");
}).listen(8081);

서버 테스트 해보기

console.log("Server running at http://127.0.0.1:8081");
