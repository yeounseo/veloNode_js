Express 프레임워크 응용하기 - RESTful API 편

RESTful API 
REST 는 Representational State Transfer 의 약자 ,
월드와이드웹(www)와 같은 하이퍼미디어 시스템을 위한 소프트웨어 아키텍쳐 중 하나의 형식이다. REST 서버는 클라이언트로 하여금 HTTP 프로토콜을 사용해 서버의 정보에 접근 및 변경을 가능케한다. 여기서 정보는 text, xml , json 등 형식으로 제공되는데, 요즘 트렌드는 json 이다.

HTTP 메소드

HTTP / 1.1 에서 제공되는 메소드는 여러개가 있는데,
REST 기반 아키텍쳐에서 자주 사용되는 4가지 메소드는 다음과 같다.
1.GET - 조회
2.PUT - 생성 및 업데이트
3.DELETE - 제거
4.POST - 생성 

여기서 PUT 과 POST 가 둘다 생성을 하는데 , 어떤 상황에 무엇을 써야할지 알아보자.

idempotent 
PUT 과 POST 를 이해하기 위해, idempotent라는 개념의 도입이 필요하다.
한글로 직역하면 멱등의 정도 되시겠다. 수학적으로 이해하는 편이 쉬운데.. 
f(x) = f(f(x))
라 보면 된다 . 몇 번이고 같은 연산을 반복해도 같은 값이 나온다는 것.
이건 fault-tolerant API 를 디자인하는데 있어서 굉장히 중요한 요소다.

POST 는 클라이언트가 리소스의 위치를 지정하지 않았을때 리소스를 생성하기 위해 사용하는 연산이다. 

POST /dogs HTTP/1.1
{ "name" : "blue" , "age":5 }
HTTP/1.1 201 Created

따라서 이 연산을 수행하면 /dogs/2 에 생기고, 그 다음번엔 
/dogs/3 등 매번 다른곳에 새로운 리소스가 생성될 수 있으므로, 이 연산은 idempotent 하지 않다.

PUT 반면 리소스의 위치가 명확히 지정된 다음의 요청을 고려해 보자.

PUT /dogs/3 HTTP/1.1
{ "name" : "blue" , "age" : 5 }

/dogs 의 프로퍼티가 name과 age뿐이라면, 이건 몇 번을 수행하더라도, 같은 결과를 보장한다. 다시 말해 idempotent 하다.
그리고 위에 예에서 알 수 있듯이 PUT 은 리소스의 위치가 지정 되었을때 생성 또는 업데이트를 위해 사용할 수 있다.

###PATCH 
PUT이 리소스의 모든 프로퍼티를 업데이트 하기 위해 사용된다면, PATCH는 부분만을 업데이트 하기 위해 사용한다. PUT 과 마찬가지로 리소르의 위치를  클라이언트가 알고 있을때 사용한다.

데이터 베이스 생성
JSON 기반의 사용자데이터베이스를 만들어보자.
Node.js 와 궁합이 잘 맞는 MongoDB를 사용하면 좋았겠지만 , 초점은 Express 이므로 다음으로 미룬다.

data 폴더를 만들고, user.json 파일을 생성한다.
